// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "../src/domain/schemas/generated"
  config   = "./zod-generator.config.json"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  firstName   String   @map("first_name") @db.VarChar(100)
  lastName    String   @map("last_name") @db.VarChar(100)
  dateOfBirth DateTime @map("date_of_birth") @db.Date
  timezone    String   @db.VarChar(100)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  events      Event[]

  @@map("users")
}

model Event {
  id                   String      @id @default(uuid()) @db.Uuid
  userId               String      @map("user_id") @db.Uuid
  eventType            String      @default("BIRTHDAY") @map("event_type") @db.VarChar(50)
  status               EventStatus
  targetTimestampUTC   DateTime    @map("target_timestamp_utc") @db.Timestamptz(6)
  targetTimestampLocal DateTime    @map("target_timestamp_local") @db.Timestamptz(6)
  targetTimezone       String      @map("target_timezone") @db.VarChar(100)
  executedAt           DateTime?   @map("executed_at") @db.Timestamptz(6)
  failureReason        String?     @map("failure_reason") @db.Text
  retryCount           Int         @default(0) @map("retry_count")
  version              Int         @default(1)
  idempotencyKey       String      @unique @map("idempotency_key") @db.VarChar(255)
  deliveryPayload      Json        @map("delivery_payload") @db.JsonB
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_events_user_id")
  @@index([status], map: "idx_events_status")
  @@index([targetTimestampUTC], map: "idx_events_target_timestamp_utc")
  @@index([targetTimestampUTC, status], map: "idx_events_scheduler_query")
  @@index([userId, status], map: "idx_events_user_pending")
  @@map("events")
}

enum EventStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
