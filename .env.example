# Environment Configuration Template
# Copy this file to .env and fill in your actual values

# Node Environment
NODE_ENV=development

# PostgreSQL Database Configuration (Story 1.2 - Docker)
# Used by Docker Compose and application database connection
POSTGRES_USER=bday_user
POSTGRES_PASSWORD=local_dev_password
POSTGRES_DB=bday_db
DATABASE_URL=postgresql://bday_user:local_dev_password@localhost:5432/bday_db

# Server Configuration (Story 1.9)
PORT=3000
HOST=0.0.0.0

# AWS Configuration (LocalStack for local development - Story 1.2)
# For production, set to actual AWS credentials and remove AWS_ENDPOINT_URL
# AWS_ENDPOINT_URL is the standard AWS SDK v3 environment variable for custom endpoints
AWS_ENDPOINT_URL=http://localhost:4566
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=test
AWS_SECRET_ACCESS_KEY=test

# SQS Queue Configuration (Story 2.2)
# Queue URL for event message processing (all event types: birthday, anniversary, reminder, etc.)
# LocalStack format: http://localhost:4566/000000000000/{queue-name}
SQS_QUEUE_URL=http://localhost:4566/000000000000/events-queue

# LocalStack Service Settings (Story 1.2)
# Services: apigateway, lambda, sqs, eventbridge, sns
LOCALSTACK_SERVICES=apigateway,lambda,sqs,eventbridge,sns
LAMBDA_EXECUTOR=docker

# Logging
LOG_LEVEL=info

# Webhook Delivery Configuration (Story 2.4)
# Option 1: Use webhook.site for cloud-based testing (recommended for quick testing)
# - Create your unique endpoint at https://webhook.site
# - Copy the unique URL and paste below
# - View all incoming requests in the webhook.site web interface
WEBHOOK_TEST_URL=https://webhook.site/YOUR-UNIQUE-ID

# Option 2: Use local mock webhook server for offline development
# - Start server: npm run webhook:mock
# - Server will run on http://localhost:3001
# - View logs in terminal where server is running
# WEBHOOK_TEST_URL=http://localhost:3001
